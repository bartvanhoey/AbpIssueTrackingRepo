@* "NewIssue": "New issue", *@
@*  "IssueDeletionConfirmationMessage": "Are you sure to delete the issue '{0}'?", *@
@page "/issues"
@* below namespace where IIssueAppService exists *@
@using IssueTracking.Application.Contracts.Issues
@* @using IssueTracking.Application.Contracts.Issues.Dtos *@
@inherits IssueTrackingComponentBase
@using IssueTracking.Localization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Permissions
@using Volo.Abp.Application.Dtos
@using Volo.Abp.ObjectMapping
@inject IIssueAppService IssueAppService

<Card>
    <CardHeader>
        <Row>
          <Column ColumnSize="ColumnSize.Is6">
              <h2>@L["Issues"]</h2>
          </Column>
          <Column ColumnSize="ColumnSize.Is6">
              <Paragraph Alignment="TextAlignment.Right">
                  @if (CanCreateIssue)
                  {
                      <Button Color="Color.Primary" Clicked="OpenCreateModal">@L["NewIssue"]</Button>
                  }
              </Paragraph>
          </Column>
        </Row>
    </CardHeader>

    <CardBody>
        <DataGrid TItem="IssueDto" Data="IssueList" ReadData="OnDataGridReadAsync" TotalItems="TotalCount" ShowPager="true" PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn Width="150px" TItem="IssueDto" Field="@nameof(IssueDto.Id)" Sortable="true" Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (CanUpdateIssue)
                                {
                                    <DropdownItem Clicked="() => OpenEditModal(context)">
                                        @L["Edit"]
                                    </DropdownItem>
                                }
                                @if (CanDeleteIssue)
                                {
                                    <DropdownItem Clicked="() => DeleteIssueAsync(context)">
                                        @L["Delete"]
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="IssueDto" Field="@nameof(IssueDto.Title)" Caption="@L["IssueTitle"]"></DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>@L["NewIssue"]</ModalTitle>
            <CloseButton Clicked="CloseCreateModalAsync" />
        </ModalHeader>
        <ModalBody>
           <Row>
             <Column ColumnSize="ColumnSize.Is12">
             <Field>
                   <FieldLabel>@L["IssueName"]</FieldLabel>
                   <TextEdit @bind-text="@NewIssue.Title" />
                   </Field>
             </Column>
           </Row>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
            <Button Color="Color.Primary" Clicked="CreateEntityAsync">@L["Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


<Modal @ref="EditModal">
  <ModalBackdrop />
  <ModalContent IsCentered="true" Size="ModalSize.Default">
      <ModalHeader>
          <ModalTitle>@EditingIssue.Title</ModalTitle>
          <CloseButton Clicked="CloseEditModalAsync" />
      </ModalHeader>
      <ModalBody>
       <Row>
         <Column ColumnSize="ColumnSize.Is12">
           <Field>
                <FieldLabel>@L["IssueIssue"]</FieldLabel>
                <TextEdit @bind-text="@EditingIssue.Title" />
              </Field>
         </Column>
       </Row>
      </ModalBody>
      <ModalFooter>
          <Button Color="Color.Secondary" Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
          <Button Color="Color.Primary" Clicked="UpdateEntityAsync">@L["Save"]</Button>
      </ModalFooter>
  </ModalContent>
</Modal>

@code
{
  protected IReadOnlyList<IssueDto> IssueList { get; set; }
  protected  int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;
  protected  int CurrentPage { get; set; }
  protected  string CurrentSorting { get; set; }
  protected int TotalCount { get; set; }
  protected bool CanCreateIssue = true;
  protected bool CanUpdateIssue = true;
  protected bool CanDeleteIssue = true;

  protected CreateIssueDto NewIssue { get; set; }  = new CreateIssueDto();

  protected Guid EditingIssueId { get; set; }
  protected UpdateIssueDto EditingIssue { get; set; } = new UpdateIssueDto();

  protected Modal CreateModal { get; set; }
  protected Modal EditModal { get; set; }

  protected override async Task OnInitializedAsync()
  {
    await SetPermissionsAsync();
    await GetIssuesAsync();

  }

   protected async Task SetPermissionsAsync()
   {
     // CanCreateIssue = await AuthorizationService.IsGrantedAsync(IssueTrackingPermissions.Issue.Create);
     // CanUpdateIssue = await AuthorizationService.IsGrantedAsync(IssueTrackingPermissions.Issue.Update);
     // CanDeleteIssue = await AuthorizationService.IsGrantedAsync(IssueTrackingPermissions.Issue.Delete);
   }

   protected void OpenCreateModal()
   {
      NewIssue = new CreateIssueDto();
      CreateModal.Show();
   }

   protected void CloseCreateModalAsync()
   {
      CreateModal.Hide();
   }

   protected void OpenEditModal(IssueDto issue)
   {
      EditingIssueId = issue.Id;
      EditingIssue = ObjectMapper.Map<IssueDto, UpdateIssueDto>(issue);
      EditModal.Show();
   }

   protected async Task DeleteIssueAsync(IssueDto issue)
   {
      var confirmMessage = L["IssueDeletionConfirmationMessage", issue.Title];
      if (!await Message.Confirm(confirmMessage))
      {
          return;
      }

      await IssueAppService.DeleteAsync(issue.Id);
      await GetIssuesAsync();
   }

   protected async Task GetIssuesAsync()
   {
       var result = await IssueAppService.GetListAsync(
           new GetIssueListDto
           {
               MaxResultCount = PageSize,
               SkipCount = CurrentPage * PageSize,
               Sorting = CurrentSorting
           }
       );

       IssueList = result.Items;
       TotalCount = (int)result.TotalCount;
   }

      protected async Task OnDataGridReadAsync(DataGridReadDataEventArgs<IssueDto> e)
      {
          CurrentSorting = e.Columns
              .Where(c => c.Direction != SortDirection.None)
              .Select(c => c.Field + (c.Direction == SortDirection.Descending ? "DESC" : ""))
              .JoinAsString(",");
          CurrentPage = e.Page - 1;

          await GetIssuesAsync();

          StateHasChanged();
      }

      protected void CloseEditModalAsync()
      {
         EditModal.Hide();
      }

      protected async Task CreateEntityAsync()
      {
        await IssueAppService.CreateAsync(NewIssue);
        await GetIssuesAsync();
        CreateModal.Hide();
      }

      protected async Task UpdateEntityAsync()
      {
        await IssueAppService.UpdateAsync(EditingIssueId, EditingIssue);
        await GetIssuesAsync();
       EditModal.Hide();
      }

}